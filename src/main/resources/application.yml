spring:
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:pagila}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:secret}
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${AUTH_SERVER_BASE_URL:https://your-auth-server.com}/auth/realms/${AUTH_REALM:your-realm}
          jwk-set-uri: ${AUTH_SERVER_BASE_URL:https://your-auth-server.com}/auth/realms/${AUTH_REALM:your-realm}/protocol/openid-connect/certs
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            scope:
              - openid
              - profile
              - email
          pagila-auth:
            client-id: ${PAGILA_CLIENT_ID:pagila-api}
            client-secret: ${PAGILA_CLIENT_SECRET:your-secret}
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - read
              - write
        provider:
          pagila-auth:
            authorization-uri: ${AUTH_SERVER_BASE_URL:https://your-auth-server.com}/oauth2/authorize
            token-uri: ${AUTH_SERVER_BASE_URL:https://your-auth-server.com}/oauth2/token
            user-info-uri: ${AUTH_SERVER_BASE_URL:https://your-auth-server.com}/oauth2/userinfo
            jwk-set-uri: ${AUTH_SERVER_BASE_URL:https://your-auth-server.com}/.well-known/jwks.json
jwt:
  secret: ${JWT_SECRET:your-secure-secret-key}
  expiration: ${JWT_EXPIRATION:86400000}
